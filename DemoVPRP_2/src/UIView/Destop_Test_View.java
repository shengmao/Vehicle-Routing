/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UIView;

import MapRequestWebservice.*;
import Entity.entitiesinmemory.*;
import Jgraphics.JGraphAdapterDemo2;
import Solution.DatabaseConnection;
import Solution.CalculateDistance;
import Solution.MySolution2;
import Solution.ReaddatafromDB;
import java.io.IOException;
import java.net.URISyntaxException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import Solution.DatabaseConnection;
import Solution.GetGeolocation;
import org.json.JSONException;

/**
 *
 * @author lis
 */
public class Destop_Test_View extends javax.swing.JFrame {

    public String planning_result;
    public  MySolution2 aSolution;
    private ArrayList fal;
    private ReaddatafromDB rdb;
    /**
     * Creates new form Destop_Test_View
     */
    public Destop_Test_View() throws SQLException {
        initComponents();
        Set_Vehicle_Default();        
    }
    
    private void Set_Vehicle_Default() throws SQLException{
        get_company_data();      
        //Vehicle_Capacity.setEnabled(false);
    }
    
    private void get_company_data() throws SQLException{
        String query = "select * from VPR1.company";
        DatabaseConnection db = new DatabaseConnection();
        ResultSet rs = db.DBconection(query);
        
        while( rs.next() ){
            Vehicle_Type.setText(rs.getString("Vehicle Type"));
            Vehicle_Number.setText(rs.getString("Vehicle Number"));
            Vehicle_Capacity.setText(rs.getString("Vehicle Capacity"));            
        }                
    }
    private void update_company_data(){
       String query = String.format("update VPR1.company set `Vehicle Number` = '%s', `Vehicle Capacity` = '%s', `Vehicle Type`= '%s' where `Company Name` = 'DHL';", Vehicle_Number.getText(),Vehicle_Capacity.getText(),Vehicle_Type.getText());
       DatabaseConnection db = new DatabaseConnection();
       db.DBUpdateconection(query);       
       System.out.println(query);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        tab2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Company_Post_Code = new javax.swing.JLabel();
        company_name = new javax.swing.JLabel();
        Company_Address = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        Vehicle_Type = new javax.swing.JTextField();
        Vehicle_Number = new javax.swing.JTextField();
        Vehicle_Capacity = new javax.swing.JTextField();
        vehicle_change = new javax.swing.JButton();
        vehicle_save = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        Geolocation = new javax.swing.JTabbedPane();
        Create_Customer = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        Customer_NO2 = new javax.swing.JTextField();
        Customer_Name2 = new javax.swing.JTextField();
        Street_Name2 = new javax.swing.JTextField();
        City_Name2 = new javax.swing.JTextField();
        State_Name2 = new javax.swing.JTextField();
        Country_Name2 = new javax.swing.JTextField();
        Time_From2 = new javax.swing.JTextField();
        Time_to2 = new javax.swing.JTextField();
        Save_Customer2 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        Search_Customer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        Query = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Customer_Geolocation_table = new javax.swing.JTable();
        Updatae_Geolocation = new javax.swing.JButton();
        Show_Geolocation = new javax.swing.JButton();
        Order = new javax.swing.JTabbedPane();
        Create_Transportation_Order = new javax.swing.JPanel();
        Label_Order_No = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        Label_Service_time = new javax.swing.JLabel();
        Order_No = new javax.swing.JTextField();
        Customer_No = new javax.swing.JTextField();
        Quantity = new javax.swing.JTextField();
        Service_Time = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        Search_Order = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Distance = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Planning = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        get_routes = new javax.swing.JButton();

        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tab2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Company general Information"));

        jLabel7.setText("Address:");

        jLabel8.setText("Name:");

        jLabel10.setText("Post Code:");

        Company_Post_Code.setText("36037");

        company_name.setText("DHL");

        Company_Address.setText("Leipziger Stra√üe 171 Fulda Hessen German");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(94, 94, 94)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel7)
                            .add(jLabel10)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(121, 121, 121)
                        .add(jLabel8)))
                .add(55, 55, 55)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(company_name)
                    .add(Company_Post_Code)
                    .add(Company_Address))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(company_name, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Company_Address, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(35, 35, 35)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Company_Post_Code, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Vehicle Information"));

        jLabel15.setText("Vehicle Type:");

        jLabel16.setText("Vehicle Number:");

        jLabel25.setText("Vehicle Capacity:");

        Vehicle_Type.setEnabled(false);

        Vehicle_Number.setEnabled(false);

        Vehicle_Capacity.setEnabled(false);

        vehicle_change.setText("Change");
        vehicle_change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicle_changeActionPerformed(evt);
            }
        });

        vehicle_save.setText("Save");
        vehicle_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicle_saveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(56, 56, 56)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel16)
                            .add(jLabel15)
                            .add(jLabel25))
                        .add(49, 49, 49))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(vehicle_change, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(40, 40, 40)))
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(Vehicle_Type, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .add(Vehicle_Number)
                        .add(Vehicle_Capacity))
                    .add(vehicle_save, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(270, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(30, 30, 30)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Vehicle_Type, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Vehicle_Number, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(30, 30, 30)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(Vehicle_Capacity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(48, 48, 48)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vehicle_change)
                    .add(vehicle_save))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(26, Short.MAX_VALUE)
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 42, Short.MAX_VALUE))
        );

        tab2.addTab("Company", jPanel2);

        jLabel17.setText("Customer No.:");

        jLabel18.setText("Customer Name:");

        jLabel19.setText("Street Name:");

        jLabel20.setText("City Name:");

        jLabel21.setText("State Name:");

        jLabel24.setText("Closing Time");

        jLabel23.setText("Opening Time");

        Save_Customer2.setText("Save");
        Save_Customer2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_Customer2ActionPerformed(evt);
            }
        });

        jLabel22.setText("Country Name:");

        org.jdesktop.layout.GroupLayout Create_CustomerLayout = new org.jdesktop.layout.GroupLayout(Create_Customer);
        Create_Customer.setLayout(Create_CustomerLayout);
        Create_CustomerLayout.setHorizontalGroup(
            Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Create_CustomerLayout.createSequentialGroup()
                .add(13, 13, 13)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(Save_Customer2)
                    .add(Create_CustomerLayout.createSequentialGroup()
                        .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel17)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel18)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel19)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel20)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel21)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel23)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel24)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel22))
                        .add(18, 18, 18)
                        .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, Time_From2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 452, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, Country_Name2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, State_Name2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, City_Name2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, Street_Name2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, Customer_Name2)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, Customer_NO2)
                            .add(Time_to2))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        Create_CustomerLayout.setVerticalGroup(
            Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Create_CustomerLayout.createSequentialGroup()
                .addContainerGap()
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(Customer_NO2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel18)
                    .add(Customer_Name2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(Street_Name2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel20)
                    .add(City_Name2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel21)
                    .add(State_Name2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Country_Name2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel22))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Time_From2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel23))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(Create_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(Time_to2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(28, 28, 28)
                .add(Save_Customer2)
                .addContainerGap(167, Short.MAX_VALUE))
        );

        Geolocation.addTab("Create Customer", Create_Customer);

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Customer No.", "Cusotmer Name", "Street Name", "City Name", "State Name", "Country Name", "Time From", "Time to"
            }
        ));
        jScrollPane1.setViewportView(resultTable);

        Query.setText("Query");
        Query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryActionPerformed(evt);
            }
        });

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout Search_CustomerLayout = new org.jdesktop.layout.GroupLayout(Search_Customer);
        Search_Customer.setLayout(Search_CustomerLayout);
        Search_CustomerLayout.setHorizontalGroup(
            Search_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Search_CustomerLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jButton5)
                .add(32, 32, 32)
                .add(Query)
                .add(16, 16, 16))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
        );
        Search_CustomerLayout.setVerticalGroup(
            Search_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Search_CustomerLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 477, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(Search_CustomerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Query)
                    .add(jButton5)))
        );

        Geolocation.addTab("Search Customer", Search_Customer);

        Customer_Geolocation_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Customer No.", "Longitude", "Latitude"
            }
        ));
        jScrollPane4.setViewportView(Customer_Geolocation_table);

        Updatae_Geolocation.setText("Update");
        Updatae_Geolocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Updatae_GeolocationActionPerformed(evt);
            }
        });

        Show_Geolocation.setText("Query");
        Show_Geolocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_GeolocationActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(Updatae_Geolocation)
                        .add(35, 35, 35)
                        .add(Show_Geolocation)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .add(25, 25, 25)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Updatae_Geolocation)
                    .add(Show_Geolocation))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 27, Short.MAX_VALUE)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 435, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(22, 22, 22))
        );

        Geolocation.addTab("Geolocation", jPanel5);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Geolocation)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(Geolocation)
                .addContainerGap())
        );

        tab2.addTab("Customer", jPanel1);

        Create_Transportation_Order.setBorder(javax.swing.BorderFactory.createTitledBorder("Create Tranportation Order"));

        Label_Order_No.setText("Order No.:");

        jLabel28.setText("Customer No.:");

        jLabel29.setText("Quantity:");

        Label_Service_time.setText("Service Time:");

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout Create_Transportation_OrderLayout = new org.jdesktop.layout.GroupLayout(Create_Transportation_Order);
        Create_Transportation_Order.setLayout(Create_Transportation_OrderLayout);
        Create_Transportation_OrderLayout.setHorizontalGroup(
            Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Create_Transportation_OrderLayout.createSequentialGroup()
                .add(53, 53, 53)
                .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(Save)
                    .add(Create_Transportation_OrderLayout.createSequentialGroup()
                        .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, Label_Order_No)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel28)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel29)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, Label_Service_time))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(Order_No, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 459, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Customer_No, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Quantity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(Service_Time, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Create_Transportation_OrderLayout.linkSize(new java.awt.Component[] {Customer_No, Order_No, Quantity, Service_Time}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        Create_Transportation_OrderLayout.setVerticalGroup(
            Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Create_Transportation_OrderLayout.createSequentialGroup()
                .add(25, 25, 25)
                .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Label_Order_No)
                    .add(Order_No, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(16, 16, 16)
                .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel28)
                    .add(Customer_No, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(19, 19, 19)
                .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel29)
                    .add(Quantity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(22, 22, 22)
                .add(Create_Transportation_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(Label_Service_time)
                    .add(Service_Time, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(Save)
                .addContainerGap(267, Short.MAX_VALUE))
        );

        Order.addTab("Create Order", Create_Transportation_Order);

        resultTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order No.", "Customer No.", "Quantity", "Service Time"
            }
        ));
        jScrollPane2.setViewportView(resultTable1);

        jButton1.setText("Query");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout Search_OrderLayout = new org.jdesktop.layout.GroupLayout(Search_Order);
        Search_Order.setLayout(Search_OrderLayout);
        Search_OrderLayout.setHorizontalGroup(
            Search_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(Search_OrderLayout.createSequentialGroup()
                .add(Search_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Search_OrderLayout.createSequentialGroup()
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton6)
                        .add(18, 18, 18)
                        .add(jButton1))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE))
                .addContainerGap())
        );
        Search_OrderLayout.setVerticalGroup(
            Search_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, Search_OrderLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 485, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(Search_OrderLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton6)
                    .add(jButton1))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Order.addTab("Search Order", Search_Order);

        tab2.addTab("Order", Order);

        resultTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Distance No.", "Customer1 No.", "Customer2 No.", "Distance"
            }
        ));
        jScrollPane3.setViewportView(resultTable2);

        jButton2.setText("Display Distance");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Calculate New Distance");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Update All Distances");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout DistanceLayout = new org.jdesktop.layout.GroupLayout(Distance);
        Distance.setLayout(DistanceLayout);
        DistanceLayout.setHorizontalGroup(
            DistanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(DistanceLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 640, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(267, 267, 267))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DistanceLayout.createSequentialGroup()
                .add(37, 37, 37)
                .add(jButton3)
                .add(33, 33, 33)
                .add(jButton4)
                .add(45, 45, 45)
                .add(jButton2)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DistanceLayout.setVerticalGroup(
            DistanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, DistanceLayout.createSequentialGroup()
                .add(17, 17, 17)
                .add(DistanceLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton3)
                    .add(jButton4)
                    .add(jButton2))
                .add(18, 18, 18)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab2.addTab("Distance", Distance);

        jButton7.setText("Start Heuristic");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Route", "Total Travel Time", "Total Delivery Amount"
            }
        ));
        jScrollPane6.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Start ", "Pause Time", "Travel Time", "Arrive", "Issue Time", "End"
            }
        ));
        jScrollPane7.setViewportView(jTable2);

        jButton8.setText("Time Schedule");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Get Direction");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        get_routes.setText("Get Routes");
        get_routes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                get_routesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout PlanningLayout = new org.jdesktop.layout.GroupLayout(Planning);
        Planning.setLayout(PlanningLayout);
        PlanningLayout.setHorizontalGroup(
            PlanningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(PlanningLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, PlanningLayout.createSequentialGroup()
                .add(0, 222, Short.MAX_VALUE)
                .add(PlanningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, PlanningLayout.createSequentialGroup()
                        .add(jButton7)
                        .add(16, 16, 16)
                        .add(get_routes)
                        .add(18, 18, 18)
                        .add(jButton9)
                        .add(11, 11, 11))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, PlanningLayout.createSequentialGroup()
                        .add(jButton8)
                        .addContainerGap())))
        );
        PlanningLayout.setVerticalGroup(
            PlanningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, PlanningLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(PlanningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton7)
                    .add(jButton9)
                    .add(get_routes))
                .add(27, 27, 27)
                .add(jScrollPane7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 205, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jButton8)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        tab2.addTab("Planning", Planning);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(tab2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 673, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(tab2))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Save_Customer2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_Customer2ActionPerformed
        // TODO add your handling code here:
        
        String outpunt_info = Update_Cus_Query();
        JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
    }//GEN-LAST:event_Save_Customer2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            Execute_Del_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void QueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryActionPerformed
        try {
            // TODO add your handling code here:
            Execute_Cust_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_QueryActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Execute_Dist_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        
        try {
            // TODO add your handling code here:
        String outpunt_info = CalculateDistance.Startcalculating();
            JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
        } catch (SQLException ex ) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
         try {
            // TODO add your handling code here:
            String outpunt_info = CalculateDistance.update_all_dist();    
            JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        String outpunt_info = Update_Del_Query();
        JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
    }//GEN-LAST:event_SaveActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:                
        String outpunt_info = Delete_Cus_Query();
        JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
        
        //automatically update table results after deleting
        try {
            // TODO add your handling code here:
            Execute_Cust_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
       
        String outpunt_info = Delete_Del_Query();
        JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
        
        //automatically update table results after deleting
         try {
            // TODO add your handling code here:
            Execute_Del_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            // start executing, reading data from database, executing solution2 class, passing planning_results back to view class
            rdb = new ReaddatafromDB();
            rdb.Startloading();
            BenchmarkInstance2 bmInstance = new BenchmarkInstance2(rdb.instancename,Double.parseDouble(rdb.numberofvehicle),Double.parseDouble(rdb.vehiclecapacity),rdb.loclist[0], rdb.dellist,rdb.loclist);                     
            aSolution = new MySolution2("Greedy", bmInstance);
            planning_result = aSolution.Pass_Planning_results();
            
            //change on 19.06.2013  
            StringParser sp = new StringParser();
            fal = sp.convert(planning_result);
                           
            Vector<String> tableHeaders = new Vector<String>();
            Vector tableData = new Vector();
            tableHeaders.add("Route"); 
            tableHeaders.add("Total Travel Time");
            tableHeaders.add("Total Delivery Amount");        
           
            for(int i=0; i<fal.size(); i++){
               String[] subtoken = (String[])fal.get(i);                                 
                {
                    System.out.println(subtoken);  
                    Vector<Object> oneRow = new Vector<Object>();
                    oneRow.add(subtoken[0]);
                    oneRow.add(subtoken[1]);
                    oneRow.add(subtoken[2]);                        
                    tableData.add(oneRow); 
                }
            }                                                                                            
               
            jTable1.setModel(new DefaultTableModel(tableData, tableHeaders));
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
                     
    }//GEN-LAST:event_jButton7ActionPerformed

    
    
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        
        execute_time_schedule();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try {
            execute_Directions();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (URISyntaxException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void vehicle_changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicle_changeActionPerformed
                
        Vehicle_Capacity.setEnabled(true);
        Vehicle_Type.setEnabled(true);
        Vehicle_Number.setEnabled(true);                
    }//GEN-LAST:event_vehicle_changeActionPerformed

    private void vehicle_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicle_saveActionPerformed
        // TODO add your handling code here:
        update_company_data();
        Vehicle_Capacity.setEnabled(false);
        Vehicle_Type.setEnabled(false);
        Vehicle_Number.setEnabled(false); 
    }//GEN-LAST:event_vehicle_saveActionPerformed

    private void Updatae_GeolocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Updatae_GeolocationActionPerformed
        // TODO add your handling code here:
         
         try {
            // TODO add your handling code here:
            String outpunt_info = GetGeolocation.update_Geolocation();    
            JOptionPane jOptionPane1 = new JOptionPane();
        jOptionPane1.showMessageDialog(Distance, outpunt_info);
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Updatae_GeolocationActionPerformed

    private void Show_GeolocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show_GeolocationActionPerformed
        try {
            // TODO add your handling code here:
            Execute_Geolocation_Query();
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Show_GeolocationActionPerformed

    private void get_routesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_get_routesActionPerformed
        // TODO add your handling code here:
        JGraphAdapterDemo2 demo2 = new JGraphAdapterDemo2();
        try {
            demo2.create_map(fal);
        } catch (SQLException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_get_routesActionPerformed

    
    private void execute_Directions() throws SQLException, IOException, URISyntaxException{
        int cline = jTable1.getSelectedRow();
        String[] subtoken = (String[])fal.get(cline);
        System.out.println(subtoken[0]);
        
        StringParser sp = new StringParser();
        String[] cindex= sp.convert2(subtoken[0]);
        StringBuilder strbuilder = new StringBuilder();
        for(int i=0; i<cindex.length; i++){
            if(i==(cindex.length-1))
            {
                strbuilder.append(Fetch_Customer_Name(cindex[i]));
            }else{
                strbuilder.append(Fetch_Customer_Name(cindex[i])+",");
            }
            
        }
        
        //String.format("{locations:[%s]}", strbuilder.toString());
        
        System.out.println(String.format("{locations:[%s]}", strbuilder.toString()));
        WebBrowserCall wbc = new WebBrowserCall();
        wbc.getdirection(String.format("{locations:[%s]}", strbuilder.toString()));
        
    }
    
    private String Fetch_Customer_Name(String str) throws SQLException{
        String cityname;
        String statename;
        String countryname;
        String returnstr ="";
        String query =String.format("select * from VPR1.customer where ID='%s'", str);
        System.out.println("query--------------"+query);
        ResultSet rs = DatabaseConnection.DBconection(query);
        while( rs.next() ){
            cityname = rs.getString("Cityname");
            statename = rs.getString("Statename");
            countryname = rs.getString("Countryname");
            returnstr = String.format("{address:%s %s %s}", cityname, statename, countryname);
        }
        return returnstr;
        
    }
    private void execute_time_schedule(){
        try{
        int cline = jTable1.getSelectedRow();
        ArrayList al = aSolution.Pass_timelist_results();
        ArrayList mal = (ArrayList)al.get(cline);
        
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Start"); 
        tableHeaders.add("Pause Time");
        tableHeaders.add("Travel Time");
        tableHeaders.add("Arrive");
        tableHeaders.add("Issue Time");
        tableHeaders.add("End");          
        
        for(int i=0; i<mal.size(); i++){
            
               Double[] cal = (Double[])mal.get(i);
               Vector<Object> oneRow = new Vector<Object>();
               
               oneRow.add(cal[0]);
               oneRow.add(cal[1]);
               oneRow.add(cal[2]);
               oneRow.add(cal[3]);
               oneRow.add(cal[4]);
               oneRow.add(cal[5]);
                              
               tableData.add(oneRow);                        
        }
        
         jTable2.setModel(new DefaultTableModel(tableData, tableHeaders));
        }catch(Exception ex){
            java.util.logging.Logger.getLogger(Destop_Test_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
        

        
    }
    //User defined Methods
    private void Execute_Cust_Query()throws SQLException{
        String query ="select * from VPR1.customer";
        ResultSet rs = DatabaseConnection.DBconection(query);
        
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Customer No."); 
        tableHeaders.add("Customer Name");
        tableHeaders.add("Street Name");
        tableHeaders.add("City Name");
        tableHeaders.add("State Name");
        tableHeaders.add("Country Name");
        tableHeaders.add("Time From");
        tableHeaders.add("Time To");
        while( rs.next() ){
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(rs.getString("ID")); 
            oneRow.add(rs.getString("CustomerName"));             
            oneRow.add(rs.getString("Streetname"));
            oneRow.add(rs.getString("Cityname"));
            oneRow.add(rs.getString("Statename"));
            oneRow.add(rs.getString("Countryname"));
            oneRow.add(rs.getString("Starttime")); 
            oneRow.add(rs.getString("Endtime"));
            
            tableData.add(oneRow);                        
        }
        
         resultTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }
    
     private void Execute_Dist_Query()throws SQLException{
       
        System.out.println("Execute_Dist_Query is executing");
        String query ="select * from VPR1.distance";
        ResultSet rs = DatabaseConnection.DBconection(query);
        
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Distance No."); 
        tableHeaders.add("Customer1 No.");
        tableHeaders.add("Customer2 No.");
        tableHeaders.add("Distance");       
        while( rs.next() ){
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(rs.getString("ID_Distance")); 
            oneRow.add(rs.getString("ID_Cus1"));             
            oneRow.add(rs.getString("ID_Cus2"));
            oneRow.add(rs.getString("Distance"));          
            
            tableData.add(oneRow);                        
        }
        
         resultTable2.setModel(new DefaultTableModel(tableData, tableHeaders));
    }
    
         private void Execute_Del_Query()throws SQLException{
       
        System.out.println("Execute_Dist_Del is executing");
        String query ="select * from VPR1.delivery";
        ResultSet rs = DatabaseConnection.DBconection(query);
        
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Order No."); 
        tableHeaders.add("Customer No.");
        tableHeaders.add("Quantity");
        tableHeaders.add("Service Time");       
        while( rs.next() ){
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(rs.getString("ID_Delivery")); 
            oneRow.add(rs.getString("Customer_ID"));             
            oneRow.add(rs.getString("Demand"));
            oneRow.add(rs.getString("Servicetime"));          
            
            tableData.add(oneRow);                        
        }
        
         resultTable1.setModel(new DefaultTableModel(tableData, tableHeaders));
    }
         
         private void Execute_Geolocation_Query()throws SQLException{
       
        System.out.println("Execute_Geolocation_Query is executing");
        String query ="select * from VPR1.geolocation";
        ResultSet rs = DatabaseConnection.DBconection(query);
        
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Customer No."); 
        tableHeaders.add("Longitude");
        tableHeaders.add("Latitude");
        while( rs.next() ){
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(rs.getString("Customer_ID")); 
            oneRow.add(rs.getString("Longitude"));             
            oneRow.add(rs.getString("Latitude"));
            
            tableData.add(oneRow);                        
        }
        
         Customer_Geolocation_table.setModel(new DefaultTableModel(tableData, tableHeaders));
    }
         
         private String Update_Cus_Query(){                          
             String query_insert =String.format("INSERT INTO customer (ID, CustomerName, Starttime, Endtime, Streetname, Cityname, Statename, Countryname) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')", Customer_NO2.getText(),Customer_Name2.getText(),Time_From2.getText(),Time_to2.getText(),Street_Name2.getText(),City_Name2.getText(),State_Name2.getText(),Country_Name2.getText());                     
             System.out.println(query_insert);
             int result_int = DatabaseConnection.DBUpdateconection(query_insert);
             System.out.println("result is:" + result_int);
             //clear Textfiled 
             Customer_NO2.setText("");
             Customer_Name2.setText("");
             Time_From2.setText("");
             Time_to2.setText("");
             Street_Name2.setText("");
             City_Name2.setText("");
             State_Name2.setText("");
             Country_Name2.setText("");                     
             if(result_int == 1){
                 return "One row has been inserted successfully";
             }else{
                 return "Insertion of one row has failed";
             }                                  
         }    
         
         private String Update_Del_Query(){
             if(Order_No.getText().length()==0 ||Customer_No.getText().length()==0 || Quantity.getText().length()==0 || Service_Time.getText().length() ==0){
              return "Please fill out all the necessary information";   
             }
             else{
             String query_insert =String.format("INSERT INTO delivery (ID_Delivery, Customer_ID, Demand, Servicetime) VALUES ('%s','%s','%s','%s')", Order_No.getText(),Customer_No.getText(),Quantity.getText(), Service_Time.getText());
             System.out.println(query_insert);
             int result_int = DatabaseConnection.DBUpdateconection(query_insert);
             System.out.println("result is:" + result_int);
             Order_No.setText(""); 
             Customer_No.setText(""); 
             Quantity.setText("");  
             Service_Time.setText(""); 
             if(result_int == 1){
                 return "One row has been inserted successfully";
             }else{
                 return "Insertion of one row has failed";
             }
             }       
             
         }      
         
         private String Delete_Cus_Query(){             
             String str = (String)resultTable.getValueAt(resultTable.getSelectedRow(),0);
             String query_delete =String.format("DELETE FROM customer WHERE ID = %s%n", str);
             System.out.println(query_delete);
             int result_int = DatabaseConnection.DBUpdateconection(query_delete);
             System.out.println("result is:" + result_int);
              if(result_int == 1){
                 return String.format("Row %s has been deleted", str);
             }else{
                 return "Deletion of one row has failed";
             }                           
         }
    
         private String Delete_Del_Query(){             
             String str = (String)resultTable1.getValueAt(resultTable1.getSelectedRow(),0);
            
             String query_delete =String.format("DELETE FROM delivery WHERE ID_Delivery = %s", str);
             System.out.println(query_delete);
             int result_int = DatabaseConnection.DBUpdateconection(query_delete);
             System.out.println("result is:" + result_int);
              if(result_int == 1){
                 return String.format("Row %s has been deleted", str);
             }else{
                 return "Deletion of one row has failed";
             }                           
         }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Destop_Test_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Destop_Test_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Destop_Test_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Destop_Test_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Destop_Test_View().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Destop_Test_View.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField City_Name2;
    private javax.swing.JLabel Company_Address;
    private javax.swing.JLabel Company_Post_Code;
    private javax.swing.JTextField Country_Name2;
    private javax.swing.JPanel Create_Customer;
    private javax.swing.JPanel Create_Transportation_Order;
    private javax.swing.JTable Customer_Geolocation_table;
    private javax.swing.JTextField Customer_NO2;
    private javax.swing.JTextField Customer_Name2;
    private javax.swing.JTextField Customer_No;
    private javax.swing.JPanel Distance;
    private javax.swing.JTabbedPane Geolocation;
    private javax.swing.JLabel Label_Order_No;
    private javax.swing.JLabel Label_Service_time;
    private javax.swing.JTabbedPane Order;
    private javax.swing.JTextField Order_No;
    private javax.swing.JPanel Planning;
    private javax.swing.JTextField Quantity;
    private javax.swing.JButton Query;
    private javax.swing.JButton Save;
    private javax.swing.JButton Save_Customer2;
    private javax.swing.JPanel Search_Customer;
    private javax.swing.JPanel Search_Order;
    private javax.swing.JTextField Service_Time;
    private javax.swing.JButton Show_Geolocation;
    private javax.swing.JTextField State_Name2;
    private javax.swing.JTextField Street_Name2;
    private javax.swing.JTextField Time_From2;
    private javax.swing.JTextField Time_to2;
    private javax.swing.JButton Updatae_Geolocation;
    private javax.swing.JTextField Vehicle_Capacity;
    private javax.swing.JTextField Vehicle_Number;
    private javax.swing.JTextField Vehicle_Type;
    private javax.swing.JLabel company_name;
    private javax.swing.JButton get_routes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable resultTable;
    private javax.swing.JTable resultTable1;
    private javax.swing.JTable resultTable2;
    private javax.swing.JTabbedPane tab2;
    private javax.swing.JButton vehicle_change;
    private javax.swing.JButton vehicle_save;
    // End of variables declaration//GEN-END:variables
}
